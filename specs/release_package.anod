from e3.anod.helper import log
from e3.anod.spec import Anod
from e3.anod.loader import spec
from e3.anod.error import ShellError
from e3.archive import create_archive
from e3.hash import sha256
import os

valid_packages = ["gprbuild", "gnat", "gnatcov"]


class ReleasePackage(spec("common")):
    @property
    def package(self):
        if "package" not in self.parsed_qualifier:
            raise Exception(
                "--qualifier=package=<%s> required" % ", ".join(valid_packages)
            )

        if self.parsed_qualifier["package"] not in valid_packages:
            raise Exception(
                "Invalid package: '%s' (expects: %s)"
                % (self.parsed_qualifier["package"], " or ".join(valid_packages))
            )

        return self.parsed_qualifier["package"]

    @property
    def version(self):
        package = self.package

        if package in ["gprbuild", "gnatcov"]:
            return self.deps[package].version
        elif package == "gnat":
            return self.deps["gcc"].version

    @property
    def package_release(self):
        """Allows to differentiate between consecutive builds of the same set
        of sources. For instance when the build options are changed.
        """
        package = self.package

        if package == "gprbuild":
            return "1"
        elif package == "gnatcov":
            return "1"
        elif package == "gnat":
            if self.env.target.triplet == "arm-eabi":
                return "1"
            elif self.env.target.triplet == "riscv64-elf":
                return "1"
            else:
                return "1"

    @property
    def release_name(self):
        return "%s-%s-%s-%s" % (
            self.package,
            self.env.platform,
            self.version,
            self.package_release,
        )

    @property
    def archive_name(self):
        return "%s.tar.gz" % self.release_name

    @property
    def build_space_name(self):
        return "%s-%s-%s" % (self.name, self.package, self.env.platform)

    @property
    def build_deps(self):
        pck = self.package
        if pck == "gprbuild":
            return [Anod.Dependency("gprbuild", track=True)]

        if pck == "gnatcov":
            return [Anod.Dependency("gnatcov", track=True)]

        if pck == "gnat":
            # Note: the binutils are already merged in gcc installation

            if self.env.target.triplet == "arm-eabi":
                return [
                    Anod.Dependency("gcc", track=True),
                    Anod.Dependency("gdb", track=True),
                    Anod.Dependency("embedded-runtimes", track=True),
                ]

            elif self.env.target.triplet == "riscv64-elf":
                return [
                    Anod.Dependency("gcc", track=True),
                    Anod.Dependency("gdb", track=True),
                    Anod.Dependency("embedded-runtimes", track=True),
                ]

            elif self.env.host.triplet == self.env.target.triplet:
                # Native
                return [
                    Anod.Dependency("gcc", track=True),
                    Anod.Dependency("gdb", track=True),
                ]
            else:
                raise Exception("Unknown target for gcc package")

    def check_github_release(self, release_name):
        try:
            # If the gh command does not fail, the release exists
            self.shell("gh", "release", "view", release_name)
            return True
        except ShellError:
            return False

    def publish_on_github(self):
        name = self.release_name
        archive = os.path.join(self["INSTALL_DIR"], self.archive_name)
        sha = archive + ".sha256"

        if self.check_github_release(name):
            log.info("There is already a GitHub release for %s. Skipping." % (name))
            return

        log.info("Publishing GitHub release for %s..." % (name))
        self.shell(
            "gh", "release", "create", name, "--notes", name, "--draft", archive, sha
        )

    @Anod.primitive()
    def build(self):
        for dep in self.deps.keys():
            self.deps[dep].merge(self["PKG_DIR"])

        name = self.release_name
        archive = self.archive_name

        create_archive(
            filename=archive,
            from_dir=self["PKG_DIR"],
            dest=self["INSTALL_DIR"],
            from_dir_rename=name,
        )

        sha = sha256(os.path.join(self["INSTALL_DIR"], archive))
        log.info("archive: %s sha256: %s" % (archive, sha))
        with open(os.path.join(self["INSTALL_DIR"], archive + ".sha256"), "w") as f:
            f.write(sha)

        if "do_gh_release" in self.parsed_qualifier:
            self.publish_on_github()
